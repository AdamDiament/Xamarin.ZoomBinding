using ObjCRuntime;
using Foundation;


namespace ZoomiosScreenShare
{

	// @protocol MobileRTCScreenShareServiceDelegate
	[Protocol, Model(AutoGeneratedName = true)]
	interface MobileRTCScreenShareServiceDelegate
	{
		// @required -(void)MobileRTCScreenShareServiceFinishBroadcastWithError:(id)error;
		[Abstract]
		[Export("MobileRTCScreenShareServiceFinishBroadcastWithError:")]
		void MobileRTCScreenShareServiceFinishBroadcastWithError(NSObject error);
	}

	// @interface MobileRTCScreenShareService
	interface MobileRTCScreenShareService
	{
		[Wrap("WeakDelegate")]
		MobileRTCScreenShareServiceDelegate Delegate { get; set; }

		// @property (assign, nonatomic) id<MobileRTCScreenShareServiceDelegate> delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// @property (retain, nonatomic) int * appGroup;
		[Export("appGroup", ArgumentSemantic.Retain)]
		unsafe int* AppGroup { get; set; }

		// -(void)broadcastStartedWithSetupInfo:(id)setupInfo;
		[Export("broadcastStartedWithSetupInfo:")]
		void BroadcastStartedWithSetupInfo(NSObject setupInfo);

		// -(void)broadcastPaused;
		[Export("broadcastPaused")]
		void BroadcastPaused();

		// -(void)broadcastResumed;
		[Export("broadcastResumed")]
		void BroadcastResumed();

		// -(void)broadcastFinished;
		[Export("broadcastFinished")]
		void BroadcastFinished();

		// -(void)processSampleBuffer:(id)sampleBuffer withType:(id)sampleBufferType;
		[Export("processSampleBuffer:withType:")]
		void ProcessSampleBuffer(NSObject sampleBuffer, NSObject sampleBufferType);
	}

}

